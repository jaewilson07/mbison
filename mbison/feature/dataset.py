# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/feature/datasets.ipynb.

# %% auto 0
__all__ = ['get_datasets', 'get_pdp_policies', 'get_pdp_policy', 'create_pdp_policy', 'update_pdp_policy', 'delete_pdp_policy',
           'DomoDatasetPolicy', 'DomoDataset', 'DomoDatasets']

# %% ../../nbs/feature/datasets.ipynb 5
def get_datasets(auth : dmda.DomoAuth, debug_api : bool = False, return_raw: bool = False):
    endpoint = '/api/data/ui/v3/datasources/search'

    payload = {
            "entities": ["DATASET"],
            "filters": [],
            "combineResults":"true",
            "query":"*",
            "count":1000,
            "offset":0,
            "sort":{"isRelevance":"false",
                    "fieldSorts":[{"field":"create_date",
                                    "sortOrder":"DESC"}]}}
    
    res = dmda.domo_api_request(
        auth = auth,
        endpoint= endpoint,
        request_type='POST',
        debug_api= debug_api,
        body = payload
        
    )

    if return_raw:
        return res
    
    res.response = res.response['dataSources']
    
    return res

# %% ../../nbs/feature/datasets.ipynb 8
def get_pdp_policies(auth : dmda.DomoAuth, datasetId):
        endpoint = f'/api/query/v1/data-control/{datasetId}/filter-groups'
        
        params = {"options": "load_associations,load_filters,include_open_policy"}

        response = dmda.domo_api_request(endpoint=endpoint,
                                    auth = auth, request_type= 'GET',
                                    params=params
                                    ) 
        
        return response

def get_pdp_policy(auth: dmda.DomoAuth, datasetId, policy_id):
        endpoint = f'/api/query/v1/data-control/{datasetId}/filter-groups/{policy_id}'

        res = dmda.domo_api_request(
                auth = auth,
                method = 'GET',
                endpoint = endpoint,
                params = {'options':'load_associations,load_filters,include_open_policy'})
        
        return res

# %% ../../nbs/feature/datasets.ipynb 10
def create_pdp_policy(auth: dmda.DomoAuth, datasetId: str, pdp_object: dict):

    endpoint = f"/api/query/v1/data-control/{datasetId}/filter-groups"

    res = dmda.domo_api_request(
        auth=auth, request_type="POST", endpoint=endpoint, body=pdp_object
    )

    return res


def update_pdp_policy(auth: dmda.DomoAuth, datasetId, policyId, pdp_object: dict):
    endpoint = f"/api/query/v1/data-control/{datasetId}/filter-groups/{policyId}"

    res = dmda.domo_api_request(
        auth=auth,
        request_type="PUT",
        endpoint=endpoint,
        body=pdp_object,
    )

    return res


def delete_pdp_policy(auth: dmda.DomoAuth, datasetId, policyId):
    endpoint = f"/api/query/v1/data-control/{datasetId}/filter-groups/{policyId}"

    res = dmda.domo_api_request(auth=auth, endpoint=endpoint, request_type="DELETE")

    return res

# %% ../../nbs/feature/datasets.ipynb 12
@dataclass
class DomoDatasetPolicy:
    name: str


@dataclass
class DomoDataset:
    id: str
    name: str

    auth: dmda.DomoAuth

    pdp_policies: List[dict] = None
    domo_policies: List[DomoDatasetPolicy] = None

    @classmethod
    def _from_json(cls, auth: dmda.DomoAuth, obj: dict):
        return cls(auth=auth, id=obj["id"], name=obj["name"])

    def get_pdp_policies(self, return_raw: bool = False):

        res = get_pdp_policies(auth=self.auth, datasetId=self.id)

        if return_raw:
            return res

        self.pdp_policies = res.response
        self.domo_policies = [
            DomoDatasetPolicy(name=obj["name"]) for obj in self.pdp_policies
        ]

        return self.domo_policies

# %% ../../nbs/feature/datasets.ipynb 14
@dataclass
class DomoDatasets:
    auth: dmda.DomoAuth
    raw_datasets: List[dict] = field(default_factory=lambda: [])

    domo_datasets: List[DomoDataset] = field(default_factory=lambda: [])

    def get_datasets(self, debug_api : bool = False, return_raw: bool = False):

        res = get_datasets(self.auth, debug_api = debug_api)

        if return_raw: 
            return res
        
        self.raw_datasets = res.response

        self.domo_datasets = [
            DomoDataset._from_json(obj=obj, 
                                   auth=self.auth) for obj in self.raw_datasets
        ]

        return self.domo_datasets

    def print_datasets(self):
        print(self.domo_datasets)
