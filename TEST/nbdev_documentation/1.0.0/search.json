[
  {
    "objectID": "card.html",
    "href": "card.html",
    "title": "Card",
    "section": "",
    "text": "A list of suits you can choose from.\nThis is updated.\nA list of ranks you can choose from\nsource"
  },
  {
    "objectID": "card.html#comparison-operators",
    "href": "card.html#comparison-operators",
    "title": "Card",
    "section": "Comparison Operators",
    "text": "Comparison Operators\nEquality, less than, and greater than works on suit and indices\nHere are some tests for equality and inequality\n\ntest_eq( Card(suit = 1 , rank =3), Card(suit = 1 , rank =3))\ntest_ne( Card(suit = 2 , rank =3), Card(suit = 1 , rank =3))\ntest_ne( Card(suit = 1 , rank =2), Card(suit = 1 , rank =3))\n\nHere are tests for < and >\n\nassert Card(suit = 1, rank = 3) < Card(suit=3, rank =10)\nassert Card(suit=2, rank=12) > Card(suit=1, rank=4)\nassert not Card(suit=2, rank=12) < Card(suit=1, rank=4)"
  },
  {
    "objectID": "deck.html",
    "href": "deck.html",
    "title": "Deck",
    "section": "",
    "text": "source\n\nDeck\n\n Deck ()\n\ninitialize a deck of 52 cards not including jokers\na deck contains contain 52 Card (excludes jokers)\n\ntest_eq(len(Deck()) , 52)\n\nCan test of a card contains a deck\n\nCard(1,1) in Deck()\n\n\nsource\n\n\nDeck.pop\n\n Deck.pop (idx:int=-1)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nidx\nint\n-1\nthe index of a card to remove, defaulting to the last one\n\n\n\n\ndeck = Deck()\ntest_eq(deck.pop(), Card(3,13)) # removes the King of Hearts\n\n\nsource\n\n\nDeck.remove\n\n Deck.remove (card:nbdev_cards.card.Card)\n\nremoves card from the deck or raise exception if it is not there\n\n\n\n\nType\nDetails\n\n\n\n\ncard\nCard\ncard to remove\n\n\n\n\ncard23 = Card(suit =2, rank = 3)\ndeck.remove(card23)\n\nassert card23 not in deck\n\n\nsource\n\n\nDeck.shuffle\n\n Deck.shuffle ()\n\n\nsource\n\n\ndraw_n\n\n draw_n (n:int, replace:bool=True)\n\nDraw n cards, with replacement iif replace\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nn\nint\n\nnumber of cards to draw\n\n\nreplace\nbool\nTrue\nwhether or not to draw with replacement\n\n\n\n\ndraw_n(n = 13, replace = True)"
  },
  {
    "objectID": "snake.html",
    "href": "snake.html",
    "title": "SnakeMD",
    "section": "",
    "text": "from domo_library.DomoClasses import DomoDataset as dmds, DomoAuth as dmda\nimport importlib\nimport nbdev\n\n\nimportlib.reload(dmds)\nnbdev.show_doc(dmds.DomoDataset)\n\n\n\nDomoDataset\n\n DomoDataset\n              (full_auth:domo_library.DomoClasses.DomoAuth.DomoFullAuth=No\n              ne, dev_auth:domo_library.DomoClasses.DomoAuth.DomoDeveloper\n              Auth=None, id:str='', display_type:str='',\n              data_provider_type:str='', name:str='', description:str='',\n              row_count:int=None, column_count:int=None,\n              owner:dict=<factory>, formula:dict=<factory>,\n              stream_id:int=None, domo_instance:str='',\n              tags:domo_library.DomoClasses.DomoTag.Dataset_Tags=None, cer\n              tification:domo_library.DomoClasses.DomoCertification.DomoCe\n              rtification=None, PDPPolicies:domo_library.DomoClasses.DomoP\n              DP.Dataset_PDP_Policies=None, schema:domo_library.DomoClasse\n              s.DomoDataset.Dataset_Schema=None)\n\ninteracts with domo datasets\n\n\n\n\n# export\nfrom dataclasses import dataclass\n\n\nclass Foo:\n    \"stuff goes here\"\n    \n    def __init__(self, \n                 a : int #stores a string \n                ):\n        pass\n\n\nnbdev.show_doc(Foo)\n\n\n\nFoo\n\n Foo ()\n\nstuff goes here\n\n\n\n\nfrom dotenv import dotenv_values\n\nimport os\n\nenv_path = '../.env'\n\nif os.path.exists(env_path):\n  config = dotenv_values(env_path)  \n\nelse :\n    print('no config file')\n\ndomo_instance = config.get('DOMO_INSTANCE')\ndomo_username = config.get('DOMO_USERNAME')\ndomo_password = config.get('DOMO_PASSWORD')\n\nds_id = '5789621c-6864-4ee4-a487-6b747b8fe06e'\n\n\ninstance_auth = dmda.DomoFullAuth( domo_username= domo_username, domo_password = domo_password,  domo_instance = domo_instance)\n\nprint(await instance_auth.get_auth_token())\n\ndomo_ds = dmds.DomoDataset(full_auth = instance_auth, id=ds_id)\ndomo_ds.\n\neyJjdXN0b21lcklkIjoibW1tbS0wMDEyLTAzNTAiLCJleHBpcmF0aW9uIjoxNjY5NzYxOTIwMTk4LCJobWFjU2lnbmF0dXJlIjoiMDllZjhkMjAwMDA0N2ZiOTk3OWJhZTY5NTQ1ZTkwYmMwNzMxODkwMWZiNmNmZmU5NzRhMTMxNjE1ZWRiNmNkOSIsInNpZCI6IjEyMmU1Njc1LWM2NTUtNDJhZS1iYmVmLTQ3OGMzOGRlYTNiMCIsInRpbWVzdGFtcCI6MTY2OTczMzEyMDE5OCwidG9lcyI6IlVOS05PV05TSUQiLCJ1c2VySWQiOiI5NjQ4MjgyMDkifQ%3D%3D\n\n\n\nimport snakemd\nimport os\n\ndoc_name = \"snaketest\"\ndoc_path = \"blog/posts\"\n\ndoc = snakemd.new_doc(doc_name)\ndoc._ext  = \".qmd\"\n\ndoc.add_header(\"Why Use SnakeMD?\")\n\nmermaid_str = \"\"\"flowchart LR\n  A[Hard edge] --> B(Round edge)\n  B --> C{Decision}\n  C --> D[Result one]\n  C --> E[Result two]\n\"\"\"\n\ndoc.add_code(code= mermaid_str, lang = \"{mermaid}\")\n\nprint(doc._ext)\n\ndoc.output_page(doc_path)\n\n.qmd"
  },
  {
    "objectID": "blog/index.html",
    "href": "blog/index.html",
    "title": "nbdev Blog",
    "section": "",
    "text": "Why Use SnakeMD?\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\nWhy Use SnakeMD?\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\nThis is a dummy blog posts\n\n\n\n\n\n\n\n123\n\n\nSecond Tag\n\n\n\n\nThis is a test post. In this post, I try out different functionalities\n\n\n\n\n\n\nJun 1, 2022\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "blog/posts/Post1.html",
    "href": "blog/posts/Post1.html",
    "title": "This is a dummy blog posts",
    "section": "",
    "text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam suscipit est nec dui eleifend, at dictum elit ullamcorper. Aliquam feugiat dictum bibendum. Praesent fermentum laoreet quam, cursus volutpat odio dapibus in. Fusce luctus porttitor vehicula. Donec ac tortor nisi. Donec at lectus tortor. Morbi tempor, nibh non euismod viverra, metus arcu aliquet elit, sed fringilla urna leo vel purus.\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nam suscipit est nec dui eleifend, at dictum elit ullamcorper. Aliquam feugiat dictum bibendum. Praesent fermentum laoreet quam, cursus volutpat odio dapibus in. Fusce luctus porttitor vehicula. Donec ac tortor nisi. Donec at lectus tortor. Morbi tempor, nibh non euismod viverra, metus arcu aliquet elit, sed fringilla urna leo vel purus.\n\n\nThis is inline code plus a small code chunk.\n\n\n\n\nflowchart LR\n  A[Hard edge] --> B(Round edge)\n  B --> C{Decision}\n  C --> D[Result one]\n  C --> E[Result two]"
  },
  {
    "objectID": "blog/posts/snaketest.html",
    "href": "blog/posts/snaketest.html",
    "title": "nbdev-cards",
    "section": "",
    "text": "Why Use SnakeMD?\n\n\n\n\nflowchart LR\n  A[Hard edge] --> B(Round edge)\n  B --> C{Decision}\n  C --> D[Result one]\n  C --> E[Result two]"
  },
  {
    "objectID": "blog/posts/snaketest2.html",
    "href": "blog/posts/snaketest2.html",
    "title": "nbdev-cards",
    "section": "",
    "text": "Why Use SnakeMD?\n\n\n\n\nflowchart LR\n  A[Hard edge] --> B(Round edge)\n  B --> C{Decision}\n  C --> D[Result one]\n  C --> E[Result two]"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nbdev_start",
    "section": "",
    "text": "This file will become your README and also the index of your documentation."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "nbdev_start",
    "section": "Install",
    "text": "Install\nInstall using:\npip install nbdev-cards\nor:\nconda install -c jaewilson07 nbdev-cards"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "nbdev_start",
    "section": "How to use",
    "text": "How to use\nThis lib provides a Card to create, display, and compare cards\nCards are created using the index of acceptable ranges and suits. Note the adjustment to use 1 based instead 0 based indexing.\n\nCard(suit = 1, rank = 3)\n\n3 Diamond\n\n\n\nranks\n\n[None,\n 'Ace',\n '2',\n '3',\n '4',\n '5',\n '6',\n '7',\n '8',\n '9',\n '10',\n 'Jack',\n 'Queen',\n 'King']\n\n\n\nsuits\n\n['Club', 'Diamond', 'Spade', 'Heart']"
  },
  {
    "objectID": "00_domoauth.html",
    "href": "00_domoauth.html",
    "title": "nbdev-cards",
    "section": "",
    "text": "from dataclasses import dataclass, field\n\nimport aiohttp\n\nfrom ..utils import Exceptions as ex\nfrom ..utils import ResponseGetData as gd\nfrom .routes import auth_routes\n\n\nclass Error(Exception):\n    \"\"\"Base class for other exceptions\"\"\"\n    pass\n\n\nclass InvalidCredentialsError(Exception):\n    def __init__(self, status, message=\"invalid credentials\", domo_instance=None):\n\n        instance_str = f\" at {domo_instance}\" if domo_instance else None\n        self.message = f\"Status {status} - {message}{instance_str or ''}\" or message\n        super().__init__(self.message)\n\n\n@dataclass\nclass _DA_Base:\n    domo_instance: str\n\n\n@dataclass\nclass _DA_Default:\n    token: str = field(default=None, repr=False)\n    token_name: str = field(default=None)\n    user_id: str = field(default=None, repr=False)\n    auth_header: dict = field(default_factory=dict, repr=False)\n\n    url_manual_login: str = None\n\n    async def print_is_token(self, token_name=None) -> None:\n        self.token_name = token_name\n        if not self.token:\n            await self.get_auth_token()\n\n        token_str = f\"{token_name} \"\n\n        if not self.token:\n            print(\n                f\"🚧 failed to retrieve {token_str if token_name else ''}token from {self.domo_instance}\")\n            return False\n\n        print(\n            f\"🎉 {token_str if token_name else ''}token retrieved from {self.domo_instance} ⚙️\")\n        return True\n\n\n@dataclass\nclass DomoAuth(_DA_Default, _DA_Base):\n    def _init__():\n        super().__init__()\n\n\n@dataclass\nclass _DFA_Base(_DA_Base):\n    domo_username: str\n    domo_password: str = field(default=None, repr=False)\n\n\n@dataclass\nclass DomoFullAuth(_DA_Default, _DFA_Base):\n    \"\"\"use for full authentication token\"\"\"\n\n    def __post_init__(self):\n        self.url_manual_login = f\"https://{self.domo_instance}.domo.com/auth/index?domoManualLogin=true\"\n\n    def generate_auth_header(self, token: str) -> dict:\n        self.auth_header = {'x-domo-authentication': token}\n        return self.auth_header\n\n    async def get_auth_token(self, domo_instance=None,\n                             domo_username=None, domo_password=None,\n                             debug: bool = False,\n                             session: aiohttp.ClientSession = None) -> gd.ResponseGetData:\n\n        self.domo_username = domo_username or self.domo_username\n        self.domo_password = domo_password or self.domo_password\n        self.domo_instance = domo_instance or self.domo_instance\n\n        res = await auth_routes.get_full_auth(domo_instance=self.domo_instance,\n                                              domo_username=self.domo_username,\n                                              domo_password=self.domo_password,\n                                              session=session)\n        if debug:\n            print(res)\n\n        if res.is_success == True:\n            self.token = res.response.get('sessionToken')\n            self.user_id = res.response.get('userId')\n\n            self.auth_header = self.generate_auth_header(token=self.token)\n\n            return self.token\n\n        elif res.status == 200 and not res.is_success:\n            raise InvalidCredentialsError(status=res.status,\n                                          message=res.response.get(\"reason\"),\n                                          domo_instance=self.domo_instance)\n\n        else:\n            raise ex.InvalidInstanceError(\n                message=f'invalid instance {self.domo_instance}')\n\n\n@dataclass(init=False)\nclass DomoDeveloperAuth(DomoAuth):\n    \"\"\"use for developer authentication token\"\"\"\n    domo_client_id: str\n    domo_client_secret: str\n    auth_header: str\n\n    def __init__(self, domo_client_id, domo_client_secret, domo_instance=None):\n        self.domo_client_id = domo_client_id\n        self.domo_client_secret = domo_client_secret\n        super().__init__(domo_instance)\n\n    def generate_auth_header(self, token: str) -> dict:\n        self.auth_header = {'Authorization': f'bearer {token}'}\n        return self.auth_header\n\n    def generate_auth_header_private(self, token: str) -> dict:\n        self.auth_header = {'X-domo-developer-token': f'bearer {token}'}\n        return self.auth_header\n\n    async def get_auth_token(self,\n                             domo_client_id=None,\n                             domo_client_secret=None) -> gd.ResponseGetData:\n\n        self.domo_client_id = domo_client_id or self.domo_client_id\n        self.domo_client_secret = domo_client_secret or self.domo_client_secret\n\n        res = await auth_routes.get_developer_auth(domo_client_id=self.domo_client_id,\n                                                   domo_client_secret=self.domo_client_secret)\n\n        if res.status == 200 and res.response.get('access_token'):\n            self.token = res.response.get('access_token')\n            self.user_id = res.response.get('userId')\n\n            self.auth_header = self.generate_auth_header(token=self.token)\n\n            return res\n\n        elif res.status == 200:\n            raise InvalidCredentialsError(\n                status=res.status, message=res.response.get(\"reason\"))"
  },
  {
    "objectID": "base.html",
    "href": "base.html",
    "title": "Get Data",
    "section": "",
    "text": "Classes\n\nsource\n\nResponseGetData\n\n ResponseGetData (status:int, response:<built-infunctionany>,\n                  is_success:bool)\n\nreturn this object from any API route\n\nrgd = ResponseGetData(status = 200, response = \"test\", is_success = True)\nrgd\n\nResponseGetData(status=200, response='test', is_success=True)\n\n\n\n\n\nFunctions\n\nsource\n\nget_data\n\n get_data (url, method, content_type='application/json', header:dict=None,\n           body=None, params:dict=None,\n           session:aiohttp.client.ClientSession=None, debug_api=False)\n\n\nawait get_data(\n    url=f\"https://domo-dojo.domo.com/api/content/v2/authentication\", method=\"get\"\n)\n\nResponseGetData(status=405, response='Method Not Allowed', is_success=False)\n\n\n\nsource\n\n\nlooper\n\n looper (url:str, arr_fn:<built-infunctioncallable>,\n         offset_params:dict={'offset': 'offset', 'limit': 'limit'},\n         header=None, method='POST', fixed_params:dict=None,\n         body:dict=None, body_fn=None, offset_params_in_body:bool=False,\n         maximum=2000, loop_until_end:bool=False, limit=1000,\n         session:aiohttp.client.ClientSession=None, debug_api:bool=False)"
  }
]